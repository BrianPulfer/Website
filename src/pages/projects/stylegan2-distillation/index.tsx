import AppLayout from '@/components/Layout/AppLayout';

import Head from 'next/head';
import {Image, Link, Text} from "@chakra-ui/react";

export default function StyleGANDistillation(){
    return (
        <>
            <Head><title>Projects - StyleGAN</title></Head>
            <Text fontSize={"3xl"} textAlign={"center"} mb={10}>StyleGAN2 Distillation</Text>
            <Text fontSize={"xl"} mb={5}>
                Together with my brother, we re-implemented the work of Evgeny et. al.in entitled <Link textColor={"blue.500"} href="https://arxiv.org/abs/2003.03581">{"'StyleGAN2 Distillation for Feed-forward Image Manipulation'"}</Link>. In their work, the authors show that a Pix2PixHD network can be trained on a synthetic dataset generated by a GAN (StyleGAN2).
            </Text>
            <Image src={"/imgs/projects/stylegan2-distillation.png"} alt={"StyleGAN Distillation"} mb={5}/>
            <Text fontSize={"xl"} mb={5}>
                In the re-implementation provided, we focus on the style-mixing task, and manage to train a vanilla Pix2PixHD network into creating a style-mixed face starting from 2 pictures of real persons.
            </Text>
            <Text fontSize={"xl"} mb={5} textAlign={"center"} fontWeight={"bold"}>
                The latest checkpoints of the network can be found <Link textColor={"blue.500"} href="https://drive.google.com/drive/folders/1o2Mq7vok4FUB8rOCtHnsT78igfN9GK1S?usp=sharing">here</Link>. <br/>
                The notebook containing the re-implementation of the project is publicly available at <Link textColor={"blue.500"} href="https://colab.research.google.com/drive/1hxZvml_rbjF62W-9bW39Dap1zJgR9K5w?usp=sharing">this link</Link>. <br/>
                Documentation of how the project was reimplemented can be found at the following <Link textColor={"blue.500"} href="/docs/Brian Pulfer - StyleGAN2 Distillation Reimplementation.pdf">link</Link>.
            </Text>
        </>
    );
}

StyleGANDistillation.getLayout = function getLayout(page: React.ReactElement) {
    return (
        <AppLayout>
            {page}
        </AppLayout>
    )
}